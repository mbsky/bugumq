#summary 使用示例

= BuguMQ的使用示例 =

==建立连接==
{{{
Connection conn = Connection.getInstance();
conn.setHost("192.168.0.200");
conn.setPassword("foobared");
conn.connect();
}}}
一个应用中，应该只有一个连接。在应用退出的时候，记得断开该连接：
{{{
conn.disconnect();
}}}

==获取Client==
{{{
Client client = conn.getClient();
}}}

==产生Queue消息==
{{{
client.produce("q1", "hello");
client.produce("q2", "world");

//产生紧急消息
client.produceUrgency("q1", "hurry up!");

//产生有效期为1分钟的消息
client.produce("q1", 60, "my message");

//产生2020年6月26日到期的消息
Date expireAt = parseDate("2020-06-20");
client.produce("q1", expireAt, "my message");
}}}

==消费Queue消息==
{{{
QueueListener listener = new QueueListener(){
    @Override
    public void onQueueMessage(String queue, String message) {
        System.out.println("queue: " + queue);
        System.out.println("message: " + message);
    }
};
client.consume(listener, "q1", "q2");
}}}

一个client，可以有多个QueueListener。一个QueueListener，可以监听一个或多个Queue的消息。

==停止消费==
{{{
client.stopConsume("q1");
//停止所有的消费
//client.stopAllConsume();
}}}

==清空消息队列==
{{{
client.clearQueue("q1");
}}}

==发布Topic消息==
{{{
client.publish("topic/1", "hello");
client.publish("topic/2", "world");
}}}

注意：发布到Topic的消息，如果内容为"__EMPTY__"，BuguMQ会认为它是一个空消息，不会被投递到订阅者。该值由常量MQ.EMPTY_MESSAGE定义，供BuguMQ框架内部使用。

==订阅Topic消息==
{{{
TopicListener listener = new TopicListener(){
    @Override
    public void onTopicMessage(String topic, String message) {
        System.out.println("topic: " + topic);
        System.out.println("message: " + message);
    }
            
    @Override
    public void onPatternMessage(String pattern, String topic, String message) {
        System.out.println("pattern: " + pattern);
        System.out.println("topic: " + topic);
        System.out.println("message: " + message);
    }
};
        
client.setTopicListener(listener);
        
client.subscribe("topic/1", "topic/2");

//按模式订阅
//client.subscribePattern("topic/*");
}}}

一个Client，只有一个TopicListener，用来监听所有的Topic消息。这一点与Queue消息不同，值得注意。

==退订==
{{{
client.unsubscribe("topic/1", "topic/2");

//按模式退订
//client.unsubscribePattern("topic/*");
}}}

==获取订阅者数量==
{{{
client.getSubsribersCount("topic/1");
}}}